"""
Conductor Command Content
Contains the full conductor command script content
"""

CONDUCTOR_COMMAND_CONTENT = """#!/bin/bash
# The ONLY command AI agents need to know

set -e

# Smart defaults
COMMAND=${1:-start}
ROLE=${2:-dev}

# Handle role aliases for flexibility
case "$ROLE" in
    fe|front*) ROLE="frontend" ;;
    be|back*) ROLE="backend" ;;
    ops|devops) ROLE="devops" ;;
    sec*) ROLE="security" ;;
    ml|ai) ROLE="ml-engineer" ;;
esac

case "$COMMAND" in
    start|s)
        echo "🤖 Code Conductor Agent: $ROLE"
        echo "=================================="

        # Show role capabilities (brief)
        echo "📋 Role: $ROLE"
        if [ -f ".conductor/roles/$ROLE.md" ]; then
            head -10 .conductor/roles/$ROLE.md | tail -8
        fi
        echo ""

        # Auto-discover if this is first run
        if ! gh issue list -l 'conductor:task' --limit 1 >/dev/null 2>&1; then
            echo "🔍 First run detected. Checking for initialization task..."
            INIT_TASK=$(gh issue list -l 'conductor:init' --state open --limit 1 --json number -q '.[0].number' 2>/dev/null || echo "")

            if [ -n "$INIT_TASK" ]; then
                echo "📚 Found initialization task #$INIT_TASK"
                echo "This will help discover your project structure."
                echo ""
            fi
        fi

        # Show available tasks
        echo "📊 Available Tasks:"
        TASKS=$(gh issue list -l 'conductor:task' --assignee '!*' --state open \\
            --json number,title,labels -q '.[] | "  #\\(.number): \\(.title)"' 2>/dev/null | head -5 || echo "")

        if [ -z "$TASKS" ]; then
            echo "  No tasks available yet."
            echo ""
            echo "💡 Creating demo tasks..."
            gh issue create --title "Add comprehensive README" \\
                --label "conductor:task,effort:small" \\
                --body "Create project documentation" >/dev/null 2>&1 || true
            echo "  ✓ Created demo task"
            TASKS=$(gh issue list -l 'conductor:task' --assignee '!*' --state open \\
                --json number,title -q '.[] | "  #\\(.number): \\(.title)"' 2>/dev/null || echo "")
        fi

        echo "$TASKS"
        echo ""

        # Claim best matching task
        echo "🎯 Claiming task..."
        TASK_JSON=$(python3 .conductor/scripts/task-claim.py --role "$ROLE" 2>&1)

        if echo "$TASK_JSON" | grep -q '"status": "claimed"'; then
            TASK_ID=$(echo "$TASK_JSON" | python3 -c "import json,sys; print(json.loads(sys.stdin.read())['task_id'])" 2>/dev/null || echo "unknown")
            BRANCH="agent-$ROLE-$TASK_ID"
            WORKTREE="worktrees/$BRANCH"

            # Create worktree
            mkdir -p worktrees
            git worktree add "$WORKTREE" -b "$BRANCH" >/dev/null 2>&1

            # Create context file
            cat > "$WORKTREE/TASK_CONTEXT.md" << EOF
# Task #$TASK_ID Context

Role: $ROLE
Branch: $BRANCH
Started: $(date -u +%Y-%m-%dT%H:%M:%SZ)

## Task Details
$(gh issue view $TASK_ID 2>/dev/null || echo "Task details not available")

## Quick Commands
- Update progress: gh issue comment $TASK_ID --body "Progress update..."
- Complete: ./conductor complete
- Help: ./conductor help
EOF

            echo "✅ Claimed task #$TASK_ID"
            echo "📁 Workspace: $WORKTREE"
            echo ""
            echo "Next: cd $WORKTREE"

            # Save state
            mkdir -p .conductor
            echo "$TASK_ID" > .conductor/.current-task
            echo "$WORKTREE" > .conductor/.current-worktree
        else
            echo "😴 No suitable tasks available"
        fi
        ;;

    complete|c)
        if [ -f .conductor/.current-task ]; then
            TASK_ID=$(cat .conductor/.current-task)
            WORKTREE=$(cat .conductor/.current-worktree 2>/dev/null || echo "")

            echo "✅ Completing task #$TASK_ID"

            # Create PR from worktree
            if [ -n "$WORKTREE" ] && [ -d "$WORKTREE" ]; then
                cd "$WORKTREE"
                git add -A
                git commit -m "Complete: Task #$TASK_ID" || true
                git push origin HEAD 2>/dev/null || git push --set-upstream origin HEAD

                # Create PR
                PR_URL=$(gh pr create --title "Complete: Task #$TASK_ID" \\
                    --body "Completes #$TASK_ID\\n\\nAuto-generated by Code Conductor agent: $ROLE" \\
                    --label "conductor:pr" 2>/dev/null || echo "")

                if [ -n "$PR_URL" ]; then
                    echo "✓ PR created: $PR_URL"

                    # Close issue
                    gh issue close $TASK_ID --comment "Completed via $PR_URL" 2>/dev/null || true
                fi

                # Return to main dir
                cd - > /dev/null
            fi

            # Clean up state
            rm -f .conductor/.current-task .conductor/.current-worktree

            echo ""
            echo "Ready for next task! Run: ./conductor start $ROLE"
        else
            echo "❌ No active task to complete"
        fi
        ;;

    status)
        echo "📊 Code Conductor Status"
        echo "======================="
        if [ -f .conductor/.current-task ]; then
            TASK_ID=$(cat .conductor/.current-task)
            echo "Current task: #$TASK_ID"
            gh issue view $TASK_ID --json title,state,assignees -q '"Title: \\(.title)\\nStatus: \\(.state)\\nAssigned: \\(.assignees[0].login)"' 2>/dev/null || echo "Task details not available"
        else
            echo "No active task"
        fi
        echo ""
        python3 .conductor/scripts/health-check.py --brief 2>/dev/null || echo "Health check not available"
        ;;

    tasks)
        echo "📋 Available Tasks"
        echo "=================="
        gh issue list -l 'conductor:task' --assignee '!*' --json number,title,labels,createdAt \\
            -q '.[] | "[\\(.number)] \\(.title)\\n    Labels: \\(.labels|map(.name)|join(", "))\\n    Created: \\(.createdAt)\\n"' 2>/dev/null || echo "No tasks available"
        ;;

    help|*)
        cat << EOF
🤖 conductor - The only command you need

Usage: ./conductor <command> [role]

Commands:
  start [role]  - Start work (default: dev)
  complete      - Complete current task
  status        - Show current status
  tasks         - List available tasks
  help          - Show this help

Roles: dev, frontend, backend, devops, security, ui-designer, ml-engineer, data

Example workflow:
  ./conductor start frontend    # Start as frontend agent
  cd worktrees/agent-frontend-123  # Enter your workspace
  # ... do work ...
  ./conductor complete          # Finish and get next task
EOF
        ;;
esac
"""
