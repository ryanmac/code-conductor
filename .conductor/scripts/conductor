#!/bin/bash
# The ONLY command AI agents need to know for Code Conductor projects

set -e

# Skip prerequisite checks for diagnose/help commands
if [ "$COMMAND" != "diagnose" ] && [ "$COMMAND" != "doctor" ] && [ "$COMMAND" != "help" ]; then
    # Check prerequisites
    if ! command -v gh >/dev/null 2>&1; then
        echo "❌ GitHub CLI not found. Please install it first:"
        echo "   Visit: https://cli.github.com"
        echo ""
        echo "💡 Run './conductor diagnose' to check all requirements"
        exit 1
    fi

    if ! gh auth status >/dev/null 2>&1; then
        echo "❌ GitHub CLI not authenticated"
        echo "   Run: gh auth login"
        echo ""
        echo "💡 Run './conductor diagnose' for more details"
        exit 1
    fi

    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "❌ Not in a git repository"
        echo "   Please run from your project root directory"
        exit 1
    fi
fi

# Ensure we're in the project root
if [ ! -f ".conductor/config.yaml" ]; then
    echo "❌ Error: Not in a Code Conductor project directory"
    echo "   Please run from the project root where .conductor/ exists"
    exit 1
fi

# Store project root for reference
PROJECT_ROOT=$(pwd)
PROJECT_NAME=$(basename "$PROJECT_ROOT")

# First-run check
if [ ! -f .conductor/.initialized ] && [ "${1:-}" != "diagnose" ] && [ "${1:-}" != "doctor" ] && [ "${1:-}" != "help" ]; then
    echo "👋 Welcome to Code Conductor!"
    echo ""
    echo "It looks like this is your first time using conductor."
    echo "Let's check your setup..."
    echo ""
    sleep 1
    ./conductor diagnose
    echo ""
    touch .conductor/.initialized
    echo "💡 Run './conductor help' for available commands"
    exit 0
fi

# Get command and role
COMMAND=${1:-start}
ROLE=${2:-dev}

# Normalize role names (case-insensitive with common aliases)
ROLE=$(echo "$ROLE" | tr '[:upper:]' '[:lower:]')
case "$ROLE" in
    frontend|front|fe) ROLE="frontend" ;;
    backend|back|be) ROLE="backend" ;;
    devops|ops|infra) ROLE="devops" ;;
    security|sec) ROLE="security" ;;
    ml|ml-engineer|ai) ROLE="ml-engineer" ;;
    ui|ux|design*) ROLE="ui-designer" ;;
    data|analytics) ROLE="data" ;;
    mobile|ios|android) ROLE="mobile" ;;
    qa|test*) ROLE="qa" ;;
    dev|developer|*) ROLE="dev" ;;  # Default fallback
esac

# Ensure state directory exists
mkdir -p .conductor

case "$COMMAND" in
    start|s)
        echo "🎼 Code Conductor - $PROJECT_NAME"
        echo "=================================="
        echo "Role: $ROLE"
        echo ""
        
        # Check for existing task
        if [ -f .conductor/.current-task ]; then
            CURRENT_TASK=$(cat .conductor/.current-task)
            echo "⚠️  You have an active task: #$CURRENT_TASK"
            echo "   Complete it first with: ./conductor complete"
            echo "   Or check status with: ./conductor status"
            exit 1
        fi
        
        # Get available tasks
        echo "🔍 Finding suitable tasks..."
        echo "   Querying GitHub for unassigned conductor:task issues..."
        
        # First get all conductor:task issues
        ALL_TASK_ISSUES=$(gh issue list \
            --label "conductor:task" \
            --state open \
            --json number,title,labels,assignees \
            --limit 50)
        
        # Then filter for unassigned ones
        TASKS=$(echo "$ALL_TASK_ISSUES" | jq -c '.[] | select(.assignees | length == 0)')
        
        # Count tasks for feedback
        TOTAL_TASKS=$(echo "$ALL_TASK_ISSUES" | jq 'length')
        UNASSIGNED_COUNT=$(echo "$TASKS" | grep -c '^{' || echo "0")
        
        echo "   Found $TOTAL_TASKS total tasks, $UNASSIGNED_COUNT unassigned"
        echo ""
        
        if [ -z "$TASKS" ] || [ "$UNASSIGNED_COUNT" = "0" ]; then
            echo ""
            echo "📋 No tasks found. Let me check if this is a new project..."
            
            # Check if this is first run (no existing tasks at all)
            ALL_TASKS=$(gh issue list --label "conductor:task" --state all --limit 1)
            if [ -z "$ALL_TASKS" ]; then
                echo ""
                echo "🎉 Welcome to Code Conductor! Creating starter tasks..."
                
                # Create demo tasks for new projects
                gh issue create \
                    --title "[INIT] Discover project documentation and create task map" \
                    --label "conductor:task,conductor:init,effort:medium,priority:high" \
                    --body "## AI Agent Task: Documentation Discovery

This is a special task for AI agents to explore and map this project's documentation.

### Instructions
1. Explore all documentation files (README, docs/, wikis, etc.)
2. Identify the project's purpose, architecture, and components
3. Create a comprehensive task map for development

### Success Criteria
- [ ] Created .conductor/documentation-map.yaml
- [ ] Identified all major components
- [ ] Proposed initial development tasks
- [ ] Documented any unclear areas

### Deliverable
Create \`.conductor/documentation-map.yaml\` with discovered information." \
                    >/dev/null
                
                gh issue create \
                    --title "Set up comprehensive test suite" \
                    --label "conductor:task,effort:medium,priority:high,skill:dev" \
                    --body "Create or enhance the project's test coverage with appropriate testing framework" \
                    >/dev/null
                    
                gh issue create \
                    --title "Configure CI/CD pipeline" \
                    --label "conductor:task,effort:medium,priority:medium,skill:devops" \
                    --body "Set up GitHub Actions for automated testing, linting, and deployment" \
                    >/dev/null
                
                echo "✓ Created 3 starter tasks"
                echo ""
                echo "🚀 Try again: ./conductor start $ROLE"
                exit 0
            else
                echo "❌ No unassigned tasks available"
                echo ""
                echo "💡 Options:"
                echo "   1. Create a new task as a GitHub issue with label 'conductor:task'"
                echo "   2. Wait for tasks to be unassigned"
                echo "   3. Check: gh issue list --label conductor:task"
                exit 1
            fi
        fi
        
        # Claim a task using the Python script
        echo "🎯 Attempting to claim a task..."
        echo "   Running task-claim.py with role: $ROLE"
        echo ""
        
        CLAIM_OUTPUT=$(python .conductor/scripts/task-claim.py --role "$ROLE" 2>&1)
        CLAIM_STATUS=$?
        
        if [ $CLAIM_STATUS -ne 0 ]; then
            echo "❌ Failed to claim task:"
            echo "$CLAIM_OUTPUT"
            echo ""
            echo "💡 Try running: ./conductor debug-info"
            exit 1
        fi
        
        # Show claim output for transparency
        echo "$CLAIM_OUTPUT"
        
        # Extract task ID from output
        TASK_ID=$(echo "$CLAIM_OUTPUT" | grep -o "Claimed task #[0-9]*" | grep -o "[0-9]*")
        
        if [ -z "$TASK_ID" ]; then
            echo "❌ Could not determine task ID from output"
            echo "   Output was: $CLAIM_OUTPUT"
            exit 1
        fi
        
        echo ""
        echo "✅ Successfully claimed task #$TASK_ID"
        
        # Save current task
        echo "$TASK_ID" > .conductor/.current-task
        
        # Create worktree
        BRANCH_NAME="conductor/task-$TASK_ID"
        WORKTREE_PATH="worktrees/agent-$ROLE-task-$TASK_ID"
        
        echo ""
        echo "📁 Setting up worktree..."
        
        # Ensure we're on a branch (not detached HEAD)
        if ! git symbolic-ref HEAD >/dev/null 2>&1; then
            git checkout -b temp-branch >/dev/null 2>&1
        fi
        
        # Create worktree
        git worktree add -b "$BRANCH_NAME" "$WORKTREE_PATH" >/dev/null 2>&1 || {
            # If branch exists, use it
            git worktree add "$WORKTREE_PATH" "$BRANCH_NAME" >/dev/null 2>&1
        }
        
        # Save worktree path
        echo "$WORKTREE_PATH" > .conductor/.current-worktree
        
        # Get task details for context file
        TASK_JSON=$(gh issue view "$TASK_ID" --json title,body,labels)
        TASK_TITLE=$(echo "$TASK_JSON" | jq -r '.title')
        TASK_BODY=$(echo "$TASK_JSON" | jq -r '.body')
        
        # Create context file
        cat > "$WORKTREE_PATH/.conductor-context" << EOF
# Task Context for AI Agent

## Task #$TASK_ID: $TASK_TITLE

### Description
$TASK_BODY

### Your Role: $ROLE

### Working Directory
$WORKTREE_PATH

### Next Steps
1. Review the task requirements above
2. Make necessary changes in this worktree
3. Commit your changes
4. Run: ./conductor complete

### Available Commands
- ./conductor status - Check current progress
- ./conductor complete - Finish task and create PR
EOF
        
        echo "✅ Ready to work on task #$TASK_ID!"
        echo ""
        echo "📋 Task: $TASK_TITLE"
        echo "📁 Worktree: $WORKTREE_PATH"
        echo ""
        echo "🚀 To start working:"
        echo "   cd $WORKTREE_PATH"
        echo "   cat .conductor-context  # Review task details"
        echo ""
        echo "   When done: ./conductor complete"
        ;;
        
    complete|c)
        if [ ! -f .conductor/.current-task ]; then
            echo "❌ No active task. Run: ./conductor start"
            exit 1
        fi
        
        TASK_ID=$(cat .conductor/.current-task)
        WORKTREE=$(cat .conductor/.current-worktree)
        
        echo "✅ Completing task #$TASK_ID"
        echo ""
        
        # Get task title for commit message
        TASK_TITLE=$(gh issue view "$TASK_ID" --json title -q '.title')
        
        # Auto-commit if changes exist
        cd "$WORKTREE"
        if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "📝 Committing changes..."
            git add -A
            git commit -m "Complete task #$TASK_ID: $TASK_TITLE

Implements the requirements specified in issue #$TASK_ID.

Co-Authored-By: AI Agent <conductor@ai>"
        fi
        
        # Check if we have commits to push
        if [ -z "$(git log origin/main..HEAD 2>/dev/null)" ]; then
            echo "❌ No commits to push. Make some changes first!"
            exit 1
        fi
        
        # Push changes
        echo "📤 Pushing changes..."
        git push origin HEAD
        
        # Create PR
        echo "🔄 Creating pull request..."
        PR_URL=$(gh pr create \
            --title "Complete: $TASK_TITLE" \
            --body "## Summary
Completes task #$TASK_ID

## Changes
$(git log origin/main..HEAD --oneline)

## Testing
- [ ] Tests pass
- [ ] Code follows project standards

Closes #$TASK_ID" \
            --base main)
        
        echo ""
        echo "✅ Task completed!"
        echo "📎 PR: $PR_URL"
        
        # Update issue
        gh issue comment "$TASK_ID" --body "Pull request created: $PR_URL"
        
        # Return to project root and cleanup
        cd "$PROJECT_ROOT"
        rm -f .conductor/.current-task .conductor/.current-worktree
        
        echo ""
        echo "🎉 Great work! Ready for next task:"
        echo "   ./conductor start $ROLE"
        ;;
        
    status)
        echo "📊 Code Conductor Status"
        echo "========================"
        echo "Project: $PROJECT_NAME"
        echo ""
        
        if [ -f .conductor/.current-task ]; then
            TASK_ID=$(cat .conductor/.current-task)
            WORKTREE=$(cat .conductor/.current-worktree 2>/dev/null || echo "unknown")
            
            TASK_INFO=$(gh issue view "$TASK_ID" --json title,state,labels)
            TASK_TITLE=$(echo "$TASK_INFO" | jq -r '.title')
            TASK_STATE=$(echo "$TASK_INFO" | jq -r '.state')
            
            echo "Current Task:"
            echo "  📌 #$TASK_ID: $TASK_TITLE"
            echo "  📁 Worktree: $WORKTREE"
            echo "  🏷️  State: $TASK_STATE"
            echo ""
            echo "Commands:"
            echo "  ./conductor complete - Finish this task"
            echo "  cd $WORKTREE - Go to work directory"
        else
            echo "No active task."
            echo ""
            echo "Available tasks:"
            if AVAILABLE=$(gh issue list \
                --label "conductor:task" \
                --state open \
                --json number,title,assignees \
                --jq '.[] | select(.assignees | length == 0) | "  #\(.number): \(.title)"' 2>&1); then
                echo "$AVAILABLE" | head -5
            else
                echo "  (Unable to fetch tasks)"
            fi
            echo ""
            echo "Start with: ./conductor start $ROLE"
        fi
        ;;
        
    tasks|list)
        echo "📋 Available Tasks"
        echo "=================="
        
        # Check GitHub CLI auth first
        if ! gh auth status >/dev/null 2>&1; then
            echo "❌ GitHub CLI not authenticated. Run: gh auth login"
            exit 1
        fi
        
        # Check if in git repo
        if ! git rev-parse --git-dir >/dev/null 2>&1; then
            echo "❌ Not in a git repository"
            exit 1
        fi
        
        echo ""
        
        # Debug: Show raw output first (commented out for production)
        # echo "Debug: Raw GitHub CLI output:"
        # gh issue list -l 'conductor:task' --state open
        # echo ""
        
        # Use a simpler approach that works more reliably
        echo "Unassigned tasks:"
        echo ""
        
        # Get all open conductor:task issues and filter unassigned ones
        TASKS=$(gh issue list \
            --label "conductor:task" \
            --state open \
            --json number,title,labels,assignees,createdAt \
            --limit 50)
        
        if [ -z "$TASKS" ]; then
            echo "No tasks found."
            echo ""
            echo "💡 Create a new task with: gh issue create -l 'conductor:task'"
        else
            # Parse tasks and show unassigned ones
            UNASSIGNED=$(echo "$TASKS" | jq -r '.[] | select(.assignees | length == 0) | "[#\(.number)] \(.title)\n    Labels: \(.labels | map(.name) | join(", "))\n    Created: \(.createdAt[:10])\n"')
            
            if [ -z "$UNASSIGNED" ]; then
                echo "No unassigned tasks available."
                echo ""
                echo "All tasks assigned:"
                echo "$TASKS" | jq -r '.[] | select(.assignees | length > 0) | "  [#\(.number)] \(.title) (assigned to: \(.assignees | map(.login) | join(", ")))"'
            else
                echo "$UNASSIGNED"
            fi
        fi
        
        echo ""
        echo "💡 View all tasks: gh issue list -l 'conductor:task'"
        ;;
        
    progress|p)
        if [ ! -f .conductor/.current-task ]; then
            echo "❌ No active task. Run: ./conductor start"
            exit 1
        fi
        
        TASK_ID=$(cat .conductor/.current-task)
        WORKTREE=$(cat .conductor/.current-worktree 2>/dev/null || echo "unknown")
        
        # Get task info
        TASK_INFO=$(gh issue view "$TASK_ID" --json title,number)
        TASK_TITLE=$(echo "$TASK_INFO" | jq -r '.title')
        
        echo "📝 Progress Update for Task #$TASK_ID"
        echo "=================================="
        echo "Task: $TASK_TITLE"
        echo ""
        echo "Enter your progress update (Markdown supported):"
        echo "Press Ctrl+D when finished"
        echo ""
        
        # Read multiline input
        PROGRESS_UPDATE=$(cat)
        
        if [ -z "$PROGRESS_UPDATE" ]; then
            echo "❌ No update provided. Cancelled."
            exit 1
        fi
        
        # Post comment to GitHub issue
        COMMENT_BODY="### 📊 Progress Update

$PROGRESS_UPDATE

---
*Updated by AI Agent (Role: ${ROLE}) at $(date '+%Y-%m-%d %H:%M:%S')*
*Worktree: \`$WORKTREE\`*"
        
        echo ""
        echo "📤 Posting update to GitHub..."
        
        gh issue comment "$TASK_ID" --body "$COMMENT_BODY"
        
        echo "✅ Progress update posted!"
        echo ""
        echo "💡 Recent updates:"
        gh issue view "$TASK_ID" --comments --json comments \
            --jq '.comments[-3:] | .[] | "  - \(.author.login) (\(.createdAt | split("T")[0])): \(.body | split("\n")[0] | .[0:60])..."' 2>/dev/null || echo "  (Unable to fetch recent comments)"
        ;;
        
    debug-info)
        echo "🔍 Conductor Debug Info"
        echo "======================"
        
        echo "1. GitHub CLI Check:"
        gh auth status || echo "Not authenticated"
        
        echo -e "\n2. All issues with conductor labels:"
        gh issue list --search "label:conductor:task OR label:conductor:status" --limit 20
        
        echo -e "\n3. Unassigned task issues:"
        gh issue list -l 'conductor:task' --assignee @none --state open
        
        echo -e "\n4. My assigned issues:"
        gh issue list -l 'conductor:task' --assignee @me --state open
        
        echo -e "\n5. All conductor:task issues (no filters):"
        gh issue list -l 'conductor:task' --state open
        
        echo -e "\n6. Raw JSON output:"
        gh issue list -l 'conductor:task' --state open --json number,title,assignees --limit 5
        ;;
        
    recover|debug|fix)
        echo "🔧 Code Conductor Recovery Tool"
        echo "==============================="
        echo ""
        
        # Check 1: Git repository
        echo "1️⃣ Checking git repository..."
        if ! git rev-parse --git-dir >/dev/null 2>&1; then
            echo "   ❌ Not in a git repository!"
            echo "   Fix: Run conductor commands from project root"
            exit 1
        fi
        echo "   ✅ Git repository detected"
        echo ""
        
        # Check 2: GitHub CLI authentication
        echo "2️⃣ Checking GitHub CLI..."
        if ! gh auth status >/dev/null 2>&1; then
            echo "   ❌ GitHub CLI not authenticated!"
            echo "   Fix: Run 'gh auth login'"
            exit 1
        fi
        echo "   ✅ GitHub CLI authenticated"
        echo ""
        
        # Check 3: Conductor configuration
        echo "3️⃣ Checking conductor configuration..."
        if [ ! -f ".conductor/config.yaml" ]; then
            echo "   ❌ Conductor not configured!"
            echo "   Fix: Run 'python setup.py' first"
            exit 1
        fi
        echo "   ✅ Conductor configured"
        echo ""
        
        # Check 4: Current task state
        echo "4️⃣ Checking task state..."
        if [ -f .conductor/.current-task ]; then
            TASK_ID=$(cat .conductor/.current-task)
            WORKTREE=$(cat .conductor/.current-worktree 2>/dev/null || echo "none")
            echo "   📌 Found active task: #$TASK_ID"
            echo "   📁 Worktree: $WORKTREE"
            
            # Check if worktree still exists
            if [ "$WORKTREE" != "none" ] && [ ! -d "$WORKTREE" ]; then
                echo "   ⚠️  Worktree missing! State is inconsistent."
                echo ""
                echo "   Options:"
                echo "   1) Clear state and start fresh"
                echo "   2) Try to recover worktree"
                echo "   3) Cancel"
                read -p "   Choice [1-3]: " choice
                
                case $choice in
                    1)
                        rm -f .conductor/.current-task .conductor/.current-worktree
                        echo "   ✅ State cleared. Run './conductor start' to begin fresh."
                        ;;
                    2)
                        echo "   Attempting to recreate worktree..."
                        BRANCH_NAME="conductor/task-$TASK_ID"
                        git worktree add -b "$BRANCH_NAME" "$WORKTREE" >/dev/null 2>&1 || \
                            git worktree add "$WORKTREE" "$BRANCH_NAME" >/dev/null 2>&1 || \
                            echo "   ❌ Could not recover. Use option 1 to clear state."
                        ;;
                    *)
                        echo "   Cancelled."
                        ;;
                esac
            else
                echo "   ✅ Task state appears valid"
            fi
        else
            echo "   ✅ No active task (clean state)"
        fi
        echo ""
        
        # Check 5: Worktrees
        echo "5️⃣ Checking worktrees..."
        if [ -d worktrees ]; then
            WORKTREE_COUNT=$(ls -1 worktrees 2>/dev/null | wc -l | tr -d ' ')
            if [ "$WORKTREE_COUNT" -gt 0 ]; then
                echo "   📁 Found $WORKTREE_COUNT worktree(s):"
                for wt in worktrees/*; do
                    if [ -d "$wt" ]; then
                        echo -n "      - $(basename $wt)"
                        # Check for uncommitted changes
                        if cd "$wt" 2>/dev/null && ! git diff --quiet; then
                            echo " ⚠️  (has uncommitted changes)"
                            cd - >/dev/null
                        else
                            echo " ✅"
                            cd - >/dev/null 2>&1
                        fi
                    fi
                done
                
                echo ""
                echo "   Clean up old worktrees?"
                echo "   1) Yes - Remove all worktrees older than 7 days"
                echo "   2) No - Keep all worktrees"
                read -p "   Choice [1-2]: " cleanup_choice
                
                if [ "$cleanup_choice" = "1" ]; then
                    echo "   Cleaning old worktrees..."
                    find worktrees -type d -mtime +7 -maxdepth 1 -exec rm -rf {} \; 2>/dev/null
                    echo "   ✅ Cleanup complete"
                fi
            else
                echo "   ✅ No worktrees found"
            fi
        else
            echo "   ✅ No worktrees directory"
        fi
        echo ""
        
        # Summary
        echo "📊 Recovery Summary"
        echo "=================="
        echo "All checks complete. Your conductor setup is:"
        if [ -f .conductor/.current-task ]; then
            echo "✅ Ready to continue with task #$TASK_ID"
            echo ""
            echo "Next steps:"
            echo "  ./conductor status    - See current task"
            echo "  ./conductor progress  - Update task progress"
            echo "  ./conductor complete  - Finish current task"
        else
            echo "✅ Ready for new work"
            echo ""
            echo "Next step:"
            echo "  ./conductor start    - Begin a new task"
        fi
        ;;
        
    diagnose|doctor)
        echo "🔍 Code Conductor Diagnostics"
        echo "============================"
        echo ""
        
        # 1. Check git
        echo -n "1. Git Repository: "
        if git rev-parse --git-dir >/dev/null 2>&1; then
            echo "✅ In git repository"
            REPO_ROOT=$(git rev-parse --show-toplevel)
            echo "   Root: $REPO_ROOT"
            echo "   Remote: $(git config --get remote.origin.url 2>/dev/null || echo 'No remote configured')"
        else
            echo "❌ Not in a git repository"
        fi
        echo ""
        
        # 2. Check GitHub CLI
        echo -n "2. GitHub CLI: "
        if command -v gh >/dev/null 2>&1; then
            GH_VERSION=$(gh --version | head -1)
            echo "✅ Installed ($GH_VERSION)"
        else
            echo "❌ Not installed"
            echo "   Install from: https://cli.github.com"
        fi
        echo ""
        
        # 3. Check GitHub auth
        echo -n "3. GitHub Auth: "
        if gh auth status >/dev/null 2>&1; then
            echo "✅ Authenticated"
            gh auth status 2>&1 | grep "Logged in" | sed 's/^/   /'
        else
            echo "❌ Not authenticated"
            echo "   Fix: gh auth login"
        fi
        echo ""
        
        # 4. Check conductor config
        echo -n "4. Conductor Config: "
        if [ -f ".conductor/config.yaml" ]; then
            echo "✅ Found"
            echo "   Project: $(grep "project_name:" .conductor/config.yaml | cut -d: -f2 | xargs)"
        else
            echo "❌ Not configured"
            echo "   Fix: python setup.py"
        fi
        echo ""
        
        # 5. Check labels
        echo "5. GitHub Labels:"
        if gh label list >/dev/null 2>&1; then
            CONDUCTOR_LABELS=$(gh label list | grep "conductor:" | cut -f1)
            if [ -n "$CONDUCTOR_LABELS" ]; then
                echo "   ✅ Found conductor labels:"
                echo "$CONDUCTOR_LABELS" | sed 's/^/      - /'
            else
                echo "   ❌ No conductor labels found"
                echo "   Fix: python setup.py (will create labels)"
            fi
        else
            echo "   ⚠️  Cannot check labels (auth or permissions issue)"
        fi
        echo ""
        
        # 6. Check worktree support
        echo -n "6. Git Worktree Support: "
        if git worktree list >/dev/null 2>&1; then
            echo "✅ Supported"
            WORKTREE_COUNT=$(git worktree list | wc -l | tr -d ' ')
            echo "   Active worktrees: $WORKTREE_COUNT"
        else
            echo "❌ Not supported (old git version?)"
        fi
        echo ""
        
        # 7. Check tasks
        echo "7. Task Status:"
        if [ -f ".conductor/.current-task" ]; then
            CURRENT_TASK=$(cat .conductor/.current-task)
            echo "   📌 Active task: #$CURRENT_TASK"
            if [ -f ".conductor/.current-worktree" ]; then
                WORKTREE=$(cat .conductor/.current-worktree)
                if [ -d "$WORKTREE" ]; then
                    echo "   ✅ Worktree exists: $WORKTREE"
                else
                    echo "   ❌ Worktree missing: $WORKTREE"
                fi
            fi
        else
            echo "   No active task"
        fi
        
        # Try to count available tasks
        if gh auth status >/dev/null 2>&1; then
            TASK_COUNT=$(gh issue list -l 'conductor:task' --state open --json assignees -q '[.[] | select(.assignees | length == 0)] | length' 2>/dev/null || echo "unknown")
            echo "   Available tasks: $TASK_COUNT"
        fi
        echo ""
        
        # 8. Check workflow state
        echo "8. Workflow State:"
        if [ -f ".conductor/workflow-state.json" ]; then
            echo "   ✅ State file exists"
            if command -v jq >/dev/null 2>&1; then
                TASK_COUNT_JSON=$(jq '.available_tasks | length' .conductor/workflow-state.json 2>/dev/null || echo "invalid")
                echo "   Tasks in state file: $TASK_COUNT_JSON"
            fi
        else
            echo "   No state file (normal for new projects)"
        fi
        echo ""
        
        # Summary
        echo "📊 Summary"
        echo "=========="
        ISSUES=0
        
        if ! git rev-parse --git-dir >/dev/null 2>&1; then
            echo "❌ Not in a git repository - cd to project root"
            ((ISSUES++))
        fi
        
        if ! gh auth status >/dev/null 2>&1; then
            echo "❌ GitHub CLI not authenticated - run: gh auth login"
            ((ISSUES++))
        fi
        
        if [ ! -f ".conductor/config.yaml" ]; then
            echo "❌ Conductor not configured - run: python setup.py"
            ((ISSUES++))
        fi
        
        if [ $ISSUES -eq 0 ]; then
            echo "✅ All systems operational!"
            echo ""
            echo "Next steps:"
            echo "  ./conductor tasks    - List available tasks"
            echo "  ./conductor start    - Begin working on a task"
        else
            echo ""
            echo "⚠️  Found $ISSUES issue(s) - fix them to use conductor"
        fi
        ;;
        
    help|*)
        echo "🎼 Code Conductor - AI Agent Command"
        echo "===================================="
        echo ""
        echo "Usage: ./conductor [command] [role]"
        echo ""
        echo "Commands:"
        echo "  start [role]    Begin work on a new task (default: dev)"
        echo "  complete        Finish current task and create PR"
        echo "  status          Show current task and project info"
        echo "  progress        Update progress on current task (alias: p)"
        echo "  tasks           List available tasks"
        echo "  recover         Fix common issues (aliases: debug, fix)"
        echo "  diagnose        Run system diagnostics (alias: doctor)"
        echo "  debug-info      Show detailed debug information"
        echo "  help            Show this help message"
        echo ""
        echo "Roles:"
        echo "  dev       General development (default)"
        echo "  frontend  UI/React/Vue work (aliases: fe, front)"
        echo "  backend   API/server work (aliases: be, back)"
        echo "  devops    Infrastructure/CI (aliases: ops)"
        echo "  security  Security tasks (alias: sec)"
        echo "  mobile    iOS/Android development"
        echo "  ml        Machine learning (aliases: ai, ml-engineer)"
        echo "  data      Data engineering/analytics"
        echo ""
        echo "Quick Start:"
        echo "  ./conductor start         # Start as dev"
        echo "  ./conductor start fe      # Start as frontend"
        echo "  ./conductor progress      # Update task progress"
        echo "  ./conductor complete      # Finish current task"
        echo "  ./conductor recover       # Fix issues if stuck"
        ;;
esac